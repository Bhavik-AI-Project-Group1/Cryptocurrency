# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1exaFll1BEOahbc97GdRZA97zwOEyrGap
"""

from flask import Flask, request, jsonify, render_template
import pandas as pd
import xgboost as xgb
import joblib

app = Flask(_name_)

# Load pre-trained models
xgb_model_high = joblib.load('xgb_model_high.pkl')
xgb_model_low = joblib.load('xgb_model_low.pkl')

# Get feature names from the model
feature_columns = xgb_model_high.get_booster().feature_names

def prepare_features(future_date, currency_name, feature_columns):
    future_date = pd.to_datetime(future_date)
    future_data = {col: [0] for col in feature_columns}
    future_data['year'] = [future_date.year]
    future_data['month'] = [future_date.month]
    future_data['day'] = [future_date.day]
    future_data['weekday'] = [future_date.weekday()]
    future_data['currency_name_encoded'] = [1 if currency_name.lower() == 'ripple' else 0]
    future_df = pd.DataFrame(future_data)
    missing_features = set(feature_columns) - set(future_df.columns)
    for feature in missing_features:
        future_df[feature] = 0
    future_df = future_df[feature_columns]
    return future_df.astype(float)

@app.route('/')
def home():
    return render_template('index2.html')

@app.route('/predict', methods=['POST'])
def predict():
    try:
        # Parse form data
        future_date = request.form['future_date']
        currency_name = request.form['currency_name']

        # Prepare features for prediction
        future_df = prepare_features(future_date, currency_name, feature_columns)

        # Predict high and low prices
        predicted_high = float(xgb_model_high.predict(future_df)[0])
        predicted_low = float(xgb_model_low.predict(future_df)[0])

        # Check and adjust predictions
        if predicted_low > predicted_high:
            predicted_low, predicted_high = predicted_high, predicted_low

        # Return predictions as JSON
        return jsonify({
            'status': 'success',
            'future_date': future_date,
            'currency_name': currency_name,
            'predicted_high': round(predicted_high, 5),
            'predicted_low': round(predicted_low, 5)
        })
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)}), 400

if _name_ == '_main_':
    app.run(debug=True)